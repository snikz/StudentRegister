#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assignment_7_db
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="tod112")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertcourse(course instance);
    partial void Updatecourse(course instance);
    partial void Deletecourse(course instance);
    partial void Insertgrade(grade instance);
    partial void Updategrade(grade instance);
    partial void Deletegrade(grade instance);
    partial void Insertstudent(student instance);
    partial void Updatestudent(student instance);
    partial void Deletestudent(student instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Assignment_7_db.Properties.Settings.Default.tod112ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<course> courses
		{
			get
			{
				return this.GetTable<course>();
			}
		}
		
		public System.Data.Linq.Table<grade> grades
		{
			get
			{
				return this.GetTable<grade>();
			}
		}
		
		public System.Data.Linq.Table<student> students
		{
			get
			{
				return this.GetTable<student>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.course")]
	public partial class course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _coursecode;
		
		private string _coursename;
		
		private char _semester;
		
		private string _teacher;
		
		private EntitySet<grade> _grades;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncoursecodeChanging(string value);
    partial void OncoursecodeChanged();
    partial void OncoursenameChanging(string value);
    partial void OncoursenameChanged();
    partial void OnsemesterChanging(char value);
    partial void OnsemesterChanged();
    partial void OnteacherChanging(string value);
    partial void OnteacherChanged();
    #endregion
		
		public course()
		{
			this._grades = new EntitySet<grade>(new Action<grade>(this.attach_grades), new Action<grade>(this.detach_grades));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coursecode", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string coursecode
		{
			get
			{
				return this._coursecode;
			}
			set
			{
				if ((this._coursecode != value))
				{
					this.OncoursecodeChanging(value);
					this.SendPropertyChanging();
					this._coursecode = value;
					this.SendPropertyChanged("coursecode");
					this.OncoursecodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coursename", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string coursename
		{
			get
			{
				return this._coursename;
			}
			set
			{
				if ((this._coursename != value))
				{
					this.OncoursenameChanging(value);
					this.SendPropertyChanging();
					this._coursename = value;
					this.SendPropertyChanged("coursename");
					this.OncoursenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_semester", DbType="Char(1) NOT NULL")]
		public char semester
		{
			get
			{
				return this._semester;
			}
			set
			{
				if ((this._semester != value))
				{
					this.OnsemesterChanging(value);
					this.SendPropertyChanging();
					this._semester = value;
					this.SendPropertyChanged("semester");
					this.OnsemesterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacher", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string teacher
		{
			get
			{
				return this._teacher;
			}
			set
			{
				if ((this._teacher != value))
				{
					this.OnteacherChanging(value);
					this.SendPropertyChanging();
					this._teacher = value;
					this.SendPropertyChanged("teacher");
					this.OnteacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_grade", Storage="_grades", ThisKey="coursecode", OtherKey="coursecode")]
		public EntitySet<grade> grades
		{
			get
			{
				return this._grades;
			}
			set
			{
				this._grades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_grades(grade entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_grades(grade entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.grade")]
	public partial class grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _studentid;
		
		private string _coursecode;
		
		private char _grade1;
		
		private EntityRef<course> _course;
		
		private EntityRef<student> _student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentidChanging(int value);
    partial void OnstudentidChanged();
    partial void OncoursecodeChanging(string value);
    partial void OncoursecodeChanged();
    partial void Ongrade1Changing(char value);
    partial void Ongrade1Changed();
    #endregion
		
		public grade()
		{
			this._course = default(EntityRef<course>);
			this._student = default(EntityRef<student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int studentid
		{
			get
			{
				return this._studentid;
			}
			set
			{
				if ((this._studentid != value))
				{
					if (this._student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentidChanging(value);
					this.SendPropertyChanging();
					this._studentid = value;
					this.SendPropertyChanged("studentid");
					this.OnstudentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coursecode", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string coursecode
		{
			get
			{
				return this._coursecode;
			}
			set
			{
				if ((this._coursecode != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncoursecodeChanging(value);
					this.SendPropertyChanging();
					this._coursecode = value;
					this.SendPropertyChanged("coursecode");
					this.OncoursecodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="grade", Storage="_grade1", DbType="Char(1) NOT NULL")]
		public char grade1
		{
			get
			{
				return this._grade1;
			}
			set
			{
				if ((this._grade1 != value))
				{
					this.Ongrade1Changing(value);
					this.SendPropertyChanging();
					this._grade1 = value;
					this.SendPropertyChanged("grade1");
					this.Ongrade1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_grade", Storage="_course", ThisKey="coursecode", OtherKey="coursecode", IsForeignKey=true)]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.grades.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.grades.Add(this);
						this._coursecode = value.coursecode;
					}
					else
					{
						this._coursecode = default(string);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_grade", Storage="_student", ThisKey="studentid", OtherKey="id", IsForeignKey=true)]
		public student student
		{
			get
			{
				return this._student.Entity;
			}
			set
			{
				student previousValue = this._student.Entity;
				if (((previousValue != value) 
							|| (this._student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._student.Entity = null;
						previousValue.grades.Remove(this);
					}
					this._student.Entity = value;
					if ((value != null))
					{
						value.grades.Add(this);
						this._studentid = value.id;
					}
					else
					{
						this._studentid = default(int);
					}
					this.SendPropertyChanged("student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.student")]
	public partial class student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _studentname;
		
		private int _studentage;
		
		private EntitySet<grade> _grades;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstudentnameChanging(string value);
    partial void OnstudentnameChanged();
    partial void OnstudentageChanging(int value);
    partial void OnstudentageChanged();
    #endregion
		
		public student()
		{
			this._grades = new EntitySet<grade>(new Action<grade>(this.attach_grades), new Action<grade>(this.detach_grades));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string studentname
		{
			get
			{
				return this._studentname;
			}
			set
			{
				if ((this._studentname != value))
				{
					this.OnstudentnameChanging(value);
					this.SendPropertyChanging();
					this._studentname = value;
					this.SendPropertyChanged("studentname");
					this.OnstudentnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentage", DbType="Int NOT NULL")]
		public int studentage
		{
			get
			{
				return this._studentage;
			}
			set
			{
				if ((this._studentage != value))
				{
					this.OnstudentageChanging(value);
					this.SendPropertyChanging();
					this._studentage = value;
					this.SendPropertyChanged("studentage");
					this.OnstudentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_grade", Storage="_grades", ThisKey="id", OtherKey="studentid")]
		public EntitySet<grade> grades
		{
			get
			{
				return this._grades;
			}
			set
			{
				this._grades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_grades(grade entity)
		{
			this.SendPropertyChanging();
			entity.student = this;
		}
		
		private void detach_grades(grade entity)
		{
			this.SendPropertyChanging();
			entity.student = null;
		}
	}
}
#pragma warning restore 1591
